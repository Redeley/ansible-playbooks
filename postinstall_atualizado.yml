---
- name: Instalar pacote .deb a partir de repositório Git
  hosts: all
  become: true
  gather_facts: yes

  vars:
    repo_url: "https://github.com/Redeley/ansible-playbooks.git"
    local_clone_base: "/tmp/ansible-playbooks"
    deb_filename: "klnagent64_13.2.2-1263_amd64.deb"
    remote_dest: "/tmp/klnagent64_13.2.2-1263_amd64.deb"

  tasks:
    - name: Criar diretório de clone único com hash por host + data
      set_fact:
        local_clone_dir: "{{ local_clone_base }}_{{ ansible_date_time.epoch }}_{{ inventory_hostname }}"
      delegate_to: localhost
      become: false

    - name: Remover diretório se já existir
      file:
        path: "{{ local_clone_dir }}"
        state: absent
      delegate_to: localhost
      become: false

    - name: Clonar repositório contendo o .deb
      git:
        repo: "{{ repo_url }}"
        dest: "{{ local_clone_dir }}"
        version: "Redeley-patch-1"
        force: yes
      delegate_to: localhost
      become: false

    - name: Copiar .deb para o servidor remoto
      copy:
        src: "{{ local_clone_dir }}/{{ deb_filename }}"
        dest: "{{ remote_dest }}"
        mode: '0644'

- name: Executar instala_postinstall.sh nas máquinas do inventário
  hosts: all
  become: true
  gather_facts: no

  vars:
    repo_url: "https://github.com/Redeley/ansible-playbooks.git"
    repo_branch: "Redeley-patch-1"
    repo_dest: "/tmp/postinstall_repo"
    script_src: "/tmp/postinstall_repo/instala_postinstall.sh"
    script_dest: "/tmp/instala_postinstall.sh"

  tasks:
    - name: Clonar o repositório com o script da branch correta
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dest }}"
        version: "{{ repo_branch }}"
        force: yes

    - name: Verificar se o script foi clonado
      stat:
        path: "{{ script_src }}"
      register: postinstall_check

    - name: Abortar se o instala_postinstall.sh não for encontrado
      fail:
        msg: "O arquivo instala_postinstall.sh não foi encontrado no repositório clonado: {{ script_src }}"
      when: not postinstall_check.stat.exists

    - name: Copiar o script instala_postinstall.sh para /tmp/
      copy:
        remote_src: true
        src: "{{ script_src }}"
        dest: "{{ script_dest }}"
        mode: '0755'

    - name: Verificar se o script foi copiado corretamente para /tmp/
      stat:
        path: "{{ script_dest }}"
      register: script_check

    - name: Abortar se o script não foi copiado para /tmp/
      fail:
        msg: "O arquivo instala_postinstall.sh não foi copiado corretamente para /tmp/"
      when: not script_check.stat.exists

    - name: Garantir permissões de execução no script
      file:
        path: "{{ script_dest }}"
        mode: '0755'

    - name: Executar o script instala_postinstall.sh em /tmp
      command: "{{ script_dest }}"
      args:
        chdir: "/tmp"
